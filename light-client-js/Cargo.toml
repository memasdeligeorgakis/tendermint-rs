[package]
name        = "tendermint-light-client-js"
version     = "0.20.0"
authors     = [
    "Romain Ruetschi <romain@informal.systems>",
    "Thane Thomson <thane@informal.systems>"
]
edition     = "2018"
license     = "Apache-2.0"
readme      = "README.md"
keywords    = ["blockchain", "bft", "consensus", "light-client", "tendermint"]
categories  = ["cryptography::cryptocurrencies", "network-programming"]
repository  = "https://github.com/informalsystems/tendermint-rs"
description = """
    tendermint-light-client-js provides a lightweight, WASM-based interface to
    the Tendermint Light Client's verification functionality.
    """

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
js-sys = "0.3.25"
serde = { version = "1.0", features = [ "derive" ] }
serde_json = "1.0"
tendermint = { version = "0.20.0", path = "../tendermint" }
tendermint-light-client = { version = "0.20.0", path = "../light-client", default-features = false }
wasm-bindgen = { version = "0.2.75", features = [ "serde-serialize" ] }
wasm-bindgen-futures = "0.4.25"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

[dev-dependencies]
wasm-bindgen-test = "0.3.25"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
